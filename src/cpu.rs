#[allow(dead_code)]
#[derive(Default)]
pub struct Pins {
    pub addr: u16,
    pub data: u8,
    pub irq: u8,
    pub rdy: u8,
    pub res: u8,  // 1
    pub rw: u8,   // 1
    pub sync: u8, // 1
}

#[derive(Debug)]
pub struct DecodedInstruction {
    pub opcode: u8,
    pub arg_1: u8,
    pub arg_2: u8,
    pub string: String,
    pub length: u8,
}

#[allow(dead_code)]
#[derive(Default)]
pub struct CPU {
    pub pc: u16,
    pub sp: u8,
    pub status: u8,
    pub acc: u8,
    pub x: u8,
    pub y: u8,
}

impl CPU {
    pub fn cycle(&mut self, pins: &mut Pins) {
        let _addr = pins.addr;
        pins.addr = 0;
    }
}

pub fn disassemble(bytes: &[u8], offset: usize) -> DecodedInstruction {
    let (opcode, arg_1, arg_2) = match offset {
        o if o < bytes.len() - 2 => (bytes[o], bytes[o + 1], bytes[o + 2]),
        o if o < bytes.len() - 1 => (bytes[o], bytes[o + 1], 0),
        o if o < bytes.len() => (bytes[o], 0, 0),
        _ => (0, 0, 0),
    };

    let (length, string) = match opcode {
        0x69 => (2, format!("ADC #${:02X}", arg_1)),
        0x65 => (2, format!("ADC ${:02X}", arg_1)),
        0x75 => (2, format!("ADC ${:02X},X", arg_1)),
        0x6D => (3, format!("ADC ${:02X}{:02X}", arg_1, arg_2)),
        0x7D => (3, format!("ADC ${:02X}{:02X},X", arg_1, arg_2)),
        0x79 => (3, format!("ADC ${:02X}{:02X},Y", arg_1, arg_2)),
        0x61 => (2, format!("ADC (${:02X},X)", arg_1)),
        0x71 => (2, format!("ADC (${:02X}),Y)", arg_1)),
        0x29 => (2, format!("AND #${:02X}", arg_1)),
        0x25 => (2, format!("AND ${:02X}", arg_1)),
        0x35 => (2, format!("AND ${:02X},X", arg_1)),
        0x2D => (3, format!("AND ${:02X}{:02X}", arg_1, arg_2)),
        0x3D => (3, format!("AND ${:02X}{:02X},X", arg_1, arg_2)),
        0x39 => (3, format!("AND ${:02X}{:02X},Y", arg_1, arg_2)),
        0x21 => (2, format!("AND (${:02X},X)", arg_1)),
        0x31 => (2, format!("AND (${:02X}),Y)", arg_1)),
        0x0A => (1, format!("ASL A")),
        0x06 => (2, format!("ASL ${:02X}", arg_1)),
        0x16 => (2, format!("ASL ${:02X},X", arg_1)),
        0x0E => (3, format!("ASL ${:02X}{:02X}", arg_1, arg_2)),
        0x1E => (3, format!("ASL ${:02X}{:02X},X", arg_1, arg_2)),
        0x24 => (2, format!("BIT ${:02X},X", arg_1)),
        0x2C => (3, format!("BIT ${:02X}{:02X}", arg_1, arg_2)),
        0x10 => (2, format!("BPL ${:02X},X", arg_1)),
        0x30 => (2, format!("BPL ${:02X},X", arg_1)),
        0x50 => (2, format!("BMI ${:02X},X", arg_1)),
        0x70 => (2, format!("BVM ${:02X},X", arg_1)),
        0xB0 => (2, format!("BCS ${:02X},X", arg_1)),
        0xD0 => (2, format!("BNE ${:02X},X", arg_1)),
        0xF0 => (2, format!("BEQ ${:02X},X", arg_1)),
        0xC9 => (2, format!("CMP #${:02X}", arg_1)),
        0xC5 => (2, format!("CMP ${:02X}", arg_1)),
        0xD5 => (2, format!("CMP ${:02X},X", arg_1)),
        0xCD => (3, format!("CMP ${:02X}{:02X}", arg_1, arg_2)),
        0xDD => (3, format!("CMP ${:02X}{:02X},X", arg_1, arg_2)),
        0xD9 => (3, format!("CMP ${:02X}{:02X},Y", arg_1, arg_2)),
        0xC1 => (2, format!("CMP (${:02X},X)", arg_1)),
        0xD1 => (2, format!("CMP (${:02X}),Y)", arg_1)),
        0xE0 => (2, format!("CPX #${:02X}", arg_1)),
        0xE4 => (2, format!("CPX ${:02X}", arg_1)),
        0xEC => (3, format!("CPX ${:02X}{:02X}", arg_1, arg_2)),
        0xC0 => (2, format!("CPY ${:02X}", arg_1)),
        0xC4 => (2, format!("CPY ${:02X}", arg_1)),
        0xCC => (3, format!("CPY ${:02X}{:02X}", arg_1, arg_2)),
        0xC6 => (2, format!("DEC ${:02X}", arg_1)),
        0xD6 => (2, format!("DEC ${:02X},X", arg_1)),
        0xCE => (3, format!("DEC ${:02X}{:02X}", arg_1, arg_2)),
        0xDE => (3, format!("DEC ${:02X}{:02X},X", arg_1, arg_2)),
        0x49 => (2, format!("EOR #${:02X}", arg_1)),
        0x45 => (2, format!("EOR ${:02X}", arg_1)),
        0x55 => (2, format!("EOR ${:02X},X", arg_1)),
        0x4D => (3, format!("EOR ${:02X}{:02X}", arg_1, arg_2)),
        0x5D => (3, format!("EOR ${:02X}{:02X},X", arg_1, arg_2)),
        0x59 => (3, format!("EOR ${:02X}{:02X},Y", arg_1, arg_2)),
        0x41 => (2, format!("EOR (${:02X},X)", arg_1)),
        0x51 => (2, format!("EOR (${:02X}),Y)", arg_1)),
        0x18 => (1, format!("CLC")),
        0x38 => (1, format!("SEC")),
        0x58 => (1, format!("CLI")),
        0x78 => (1, format!("SEI")),
        0xB8 => (1, format!("CLV")),
        0xD8 => (1, format!("CLD")),
        0xF8 => (1, format!("SED")),
        0xE6 => (2, format!("INC ${:02X}", arg_1)),
        0xF6 => (2, format!("INC ${:02X},X", arg_1)),
        0xEE => (3, format!("INC ${:02X}{:02X}", arg_1, arg_2)),
        0xFE => (3, format!("INC ${:02X}{:02X},X", arg_1, arg_2)),
        0x4C => (3, format!("JMP ${:02X}{:02X}", arg_1, arg_2)),
        0x6C => (3, format!("JMP (${:02X}{:02X})", arg_1, arg_2)),
        0x20 => (3, format!("JSR ${:02X}{:02X}", arg_1, arg_2)),
        0xA9 => (2, format!("LDA #${:02X}", arg_1)),
        0xA5 => (2, format!("LDA ${:02X}", arg_1)),
        0xB5 => (2, format!("LDA ${:02X},X", arg_1)),
        0xAD => (3, format!("LDA ${:02X}{:02X}", arg_1, arg_2)),
        0xBD => (3, format!("LDA ${:02X}{:02X},X", arg_1, arg_2)),
        0xB9 => (3, format!("LDA ${:02X}{:02X},Y", arg_1, arg_2)),
        0xA1 => (2, format!("LDA (${:02X},X)", arg_1)),
        0xB1 => (2, format!("LDA (${:02X}),Y)", arg_1)),
        0xA2 => (2, format!("LDX #${:02X}", arg_1)),
        0xA6 => (2, format!("LDX ${:02X}", arg_1)),
        0xB6 => (2, format!("LDX ${:02X},Y", arg_1)),
        0xAE => (3, format!("LDX ${:02X}{:02X}", arg_1, arg_2)),
        0xBE => (3, format!("LDX ${:02X}{:02X},Y", arg_1, arg_2)),
        0xA0 => (2, format!("LDY #${:02X}", arg_1)),
        0xA4 => (2, format!("LDY ${:02X}", arg_1)),
        0xB4 => (2, format!("LDY ${:02X},Y", arg_1)),
        0xAC => (3, format!("LDY ${:02X}{:02X}", arg_1, arg_2)),
        0xBC => (3, format!("LDY ${:02X}{:02X},Y", arg_1, arg_2)),
        0x4A => (1, format!("LSR A")),
        0x46 => (2, format!("LSR ${:02X}", arg_1)),
        0x56 => (2, format!("LSR ${:02X},X", arg_1)),
        0x4E => (3, format!("LSR ${:02X}{:02X}", arg_1, arg_2)),
        0x5E => (3, format!("LSR ${:02X}{:02X},X", arg_1, arg_2)),
        0xEA => (1, format!("NOP")),
        0x09 => (2, format!("ORA #${:02X}", arg_1)),
        0x05 => (2, format!("ORA ${:02X}", arg_1)),
        0x15 => (2, format!("ORA ${:02X},X", arg_1)),
        0x0D => (3, format!("ORA ${:02X}{:02X}", arg_1, arg_2)),
        0x1D => (3, format!("ORA ${:02X}{:02X},X", arg_1, arg_2)),
        0x19 => (3, format!("ORA ${:02X}{:02X},Y", arg_1, arg_2)),
        0x01 => (2, format!("ORA (${:02X},X)", arg_1)),
        0x11 => (2, format!("ORA (${:02X}),Y)", arg_1)),
        0xAA => (1, format!("TAX")),
        0x8A => (1, format!("TXA")),
        0xCA => (1, format!("DEX")),
        0xE8 => (1, format!("INX")),
        0xA8 => (1, format!("TAY")),
        0x98 => (1, format!("TYA")),
        0x88 => (1, format!("DEY")),
        0xC8 => (1, format!("INY")),
        0x2A => (1, format!("ROL A")),
        0x26 => (2, format!("ROL ${:02X}", arg_1)),
        0x36 => (2, format!("ROL ${:02X},X", arg_1)),
        0x2E => (3, format!("ROL ${:02X}{:02X}", arg_1, arg_2)),
        0x3E => (3, format!("ROL ${:02X}{:02X},X", arg_1, arg_2)),
        0x6A => (1, format!("ROR A")),
        0x66 => (2, format!("ROR ${:02X}", arg_1)),
        0x76 => (2, format!("ROR ${:02X},X", arg_1)),
        0x6E => (3, format!("ROR ${:02X}{:02X}", arg_1, arg_2)),
        0x7E => (3, format!("ROR ${:02X}{:02X},X", arg_1, arg_2)),
        0x40 => (1, format!("RTI")),
        0x60 => (1, format!("RTS")),
        0xE9 => (2, format!("SBC #${:02X}", arg_1)),
        0xE5 => (2, format!("SBC ${:02X}", arg_1)),
        0xF5 => (2, format!("SBC ${:02X},X", arg_1)),
        0xED => (3, format!("SBC ${:02X}{:02X}", arg_1, arg_2)),
        0xFD => (3, format!("SBC ${:02X}{:02X},X", arg_1, arg_2)),
        0xF9 => (3, format!("SBC ${:02X}{:02X},Y", arg_1, arg_2)),
        0xE1 => (2, format!("SBC (${:02X},X)", arg_1)),
        0xF1 => (2, format!("SBC (${:02X}),Y)", arg_1)),
        0x85 => (2, format!("STA ${:02X}", arg_1)),
        0x95 => (2, format!("STA ${:02X},X", arg_1)),
        0x8D => (3, format!("STA ${:02X}{:02X}", arg_1, arg_2)),
        0x9D => (3, format!("STA ${:02X}{:02X},X", arg_1, arg_2)),
        0x99 => (3, format!("STA ${:02X}{:02X},Y", arg_1, arg_2)),
        0x81 => (2, format!("STA (${:02X},X)", arg_1)),
        0x91 => (2, format!("STA (${:02X}),Y)", arg_1)),
        0x9A => (1, format!("TXS")),
        0xBA => (1, format!("TSX")),
        0x48 => (1, format!("PHA")),
        0x68 => (1, format!("PLA")),
        0x08 => (1, format!("PHP")),
        0x28 => (1, format!("PLP")),
        0x86 => (2, format!("STX ${:02X}", arg_1)),
        0x96 => (2, format!("STX ${:02X},X", arg_1)),
        0x8E => (3, format!("STX ${:02X}{:02X}", arg_1, arg_2)),
        0x84 => (2, format!("STY ${:02X}", arg_1)),
        0x94 => (2, format!("STY ${:02X},X", arg_1)),
        0x8C => (3, format!("STY ${:02X}{:02X}", arg_1, arg_2)),
        0x00 => (1, format!("")),
        _ => (1, "???".to_owned()),
    };

    DecodedInstruction {
        opcode,
        arg_1,
        arg_2,
        string,
        length,
    }
}
